# frozen_string_literal: true

# Table: transfers
# Columns:
#  id                          | integer                     | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  portfolio_id                | integer                     | NOT NULL
#  from_account_id             | integer                     | NOT NULL
#  to_account_id               | integer                     | NOT NULL
#  from_transaction_id         | integer                     |
#  to_transaction_id           | integer                     |
#  currency_id                 | integer                     | NOT NULL
#  fiat_currency_id            | integer                     |
#  amount                      | numeric                     | NOT NULL
#  cost_amount                 | numeric                     |
#  average_cost_amount         | numeric                     |
#  account_cost_amount         | numeric                     | DEFAULT 0
#  account_average_cost_amount | numeric                     | DEFAULT 0
#  from_completed_at           | timestamp without time zone | NOT NULL
#  to_completed_at             | timestamp without time zone | NOT NULL
#  created_at                  | timestamp without time zone | NOT NULL
#  updated_at                  | timestamp without time zone | NOT NULL
# Indexes:
#  transfers_pkey                                                | PRIMARY KEY btree (id)
#  transfers_from_account_id_currency_id_from_completed_at_index | btree (from_account_id, currency_id, from_completed_at)
#  transfers_from_account_id_from_completed_at_index             | btree (from_account_id, from_completed_at)
#  transfers_from_transaction_id_index                           | btree (from_transaction_id)
#  transfers_portfolio_id_currency_id_from_completed_at_index    | btree (portfolio_id, currency_id, from_completed_at)
#  transfers_portfolio_id_currency_id_to_completed_at_index      | btree (portfolio_id, currency_id, to_completed_at)
#  transfers_portfolio_id_from_completed_at_index                | btree (portfolio_id, from_completed_at)
#  transfers_portfolio_id_to_completed_at_index                  | btree (portfolio_id, to_completed_at)
#  transfers_to_account_id_currency_id_to_completed_at_index     | btree (to_account_id, currency_id, to_completed_at)
#  transfers_to_account_id_to_completed_at_index                 | btree (to_account_id, to_completed_at)
#  transfers_to_transaction_id_index                             | btree (to_transaction_id)
# Foreign key constraints:
#  transfers_currency_id_fkey         | (currency_id) REFERENCES currencies(id)
#  transfers_fiat_currency_id_fkey    | (fiat_currency_id) REFERENCES currencies(id)
#  transfers_from_account_id_fkey     | (from_account_id) REFERENCES accounts(id)
#  transfers_from_transaction_id_fkey | (from_transaction_id) REFERENCES transactions(id)
#  transfers_portfolio_id_fkey        | (portfolio_id) REFERENCES portfolios(id)
#  transfers_to_account_id_fkey       | (to_account_id) REFERENCES accounts(id)
#  transfers_to_transaction_id_fkey   | (to_transaction_id) REFERENCES transactions(id)
# Referenced By:
#  transferred_assets | transferred_assets_transfer_id_fkey | (transfer_id) REFERENCES transfers(id)

class Transfer < Sequel::Model
  many_to_one :portfolio
  many_to_one :from_account, class: :Account
  many_to_one :to_account, class: :Account
  many_to_one :from_transaction, class: :Transaction
  many_to_one :to_transaction, class: :Transaction
  many_to_one :currency
  many_to_one :fiat_currency, class: :Currency

  one_to_many :transferred_assets

  TABLE_HEADERS = [
    ' ', 'from',
    ' ', 'to',
    'from_at', 'to_at',
    'id', 'from_id', 'to_id',
    'amount', '',
    'cost', '', 'cost_avg', '',
    'acc_cost', '', 'acc_cost_avg', ''
  ].freeze
  TABLE_ALIGNMENTS = ((%i[right left] * 2) + (%i[left] * 5) + (%i[right left] * 5)).freeze
  extend TableFormatter

  def before_create
    set_account_average_cost!
    super
  end

  def after_create
    transfer_assets!
    super
  end

  def table_row
    avg_currency_symbol = fiat_currency ? "#{fiat_currency.symbol}/#{currency.symbol}" : nil
    [
      from_account_id, from_account.name,
      to_account_id, to_account.name,
      from_completed_at.strftime('%Y-%m-%d %H:%M:%S'), to_completed_at.strftime('%Y-%m-%d %H:%M:%S'),
      id,
      from_transaction_id, to_transaction_id,
      # amount,
      amount.to_s('F'), currency.symbol,
      # cost
      cost_amount&.round(2)&.to_s('F'), fiat_currency&.symbol,
      average_cost_amount&.round(2)&.to_s('F'), avg_currency_symbol,
      account_cost_amount&.round(2)&.to_s('F'), fiat_currency&.symbol,
      account_average_cost_amount&.round(2)&.to_s('F'), avg_currency_symbol
    ]
  end

  private

  def transfer_assets!
    fee = (from_transaction.fee || 0).abs
    transferred_amount = amount + fee
    fee_rate = fee / transferred_amount
    total_cost = 0

    assets = Asset.disposal_lots(account: from_account, currency:, amount: transferred_amount, disposed_at: from_completed_at)

    assets.each do |asset|
      if transferred_amount >= asset.amount
        amount = asset.amount
        cost_amount = asset.cost_amount
        transferred_amount -= amount
        account_cost_amount = asset.account_cost_amount
      else
        # partial transfer
        amount = transferred_amount
        cost_amount = amount * asset.average_cost_amount
        account_cost_amount = amount * asset.account_average_cost_amount if asset.account_average_cost_amount
      end
      total_cost += cost_amount
      amount_after_fee = amount * (1 - fee_rate)

      TransferredAsset.create(
        portfolio:,
        from_account:,
        to_account:,
        transfer: self,
        acquisition: asset.acquisition,
        acquisition_type: asset.type,
        cost_currency: asset.cost_currency,
        currency:,
        amount: amount_after_fee,
        cost_amount:,
        average_cost_amount:,
        account_cost_amount:,
        account_average_cost_amount: asset.account_average_cost_amount,
        acquired_at: asset.acquired_at,
        account_acquired_at: asset.account_acquired_at
      )
      Asset.create(
        portfolio:,
        account: to_account,
        acquisition: asset.acquisition,
        type: asset.type,
        currency:,
        cost_currency: asset.cost_currency,
        amount: amount_after_fee,
        cost_amount:,
        average_cost_amount: asset.average_cost_amount,
        account_cost_amount:,
        account_average_cost_amount: asset.account_average_cost_amount,
        acquired_at: asset.acquired_at,
        account_acquired_at: asset.account_acquired_at,
        transferred_in_at: to_completed_at
      )

      asset.amount -= amount
      asset.cost_amount -= cost_amount
      asset.account_cost_amount -= account_cost_amount if account_cost_amount
      # asset.cost_amount = asset.cost_amount - cost_amount
      # asset.account_cost_amount = asset.account_cost_amount - account_cost_amount if account_cost_amount
      asset.save_changes
    end

    update(cost_amount: total_cost, average_cost_amount: total_cost / amount)
  end

  def set_account_average_cost!
    return unless account_cost_amount.nil? && account_cost_amount

    self.account_average_cost_amount = account_cost_amount / amount
  end
end
