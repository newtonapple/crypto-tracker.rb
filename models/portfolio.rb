# frozen_string_literal: true

# Table: portfolios
# Columns:
#  id         | integer                     | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  name       | character varying(255)      | NOT NULL
#  created_at | timestamp without time zone | NOT NULL
#  updated_at | timestamp without time zone | NOT NULL
# Indexes:
#  portfolios_pkey             | PRIMARY KEY btree (id)
#  portfolios_created_at_index | btree (created_at)
#  portfolios_name_index       | btree (name)
# Referenced By:
#  accounts           | accounts_portfolio_id_fkey           | (portfolio_id) REFERENCES portfolios(id)
#  assets             | assets_portfolio_id_fkey             | (portfolio_id) REFERENCES portfolios(id)
#  disposals          | disposals_portfolio_id_fkey          | (portfolio_id) REFERENCES portfolios(id)
#  transactions       | transactions_portfolio_id_fkey       | (portfolio_id) REFERENCES portfolios(id)
#  transferred_assets | transferred_assets_portfolio_id_fkey | (portfolio_id) REFERENCES portfolios(id)
#  transfers          | transfers_portfolio_id_fkey          | (portfolio_id) REFERENCES portfolios(id)

class Portfolio < Sequel::Model
  many_to_many :platforms, join_table: :accounts
  one_to_many :accounts
  one_to_many :assets
  one_to_many :disposals
  one_to_many :transactions
  one_to_many :unprocessed_transactions, class: :Transaction do |ds|
    ds.eager(:account).where(processed: false).order(:completed_at, :type)
  end
  one_to_many :transfers
  one_to_many :transferred_assets

  def transactions_for(from_crypto: [], to_crypto: [], account: [], type: [])
    from_currency = Currency.by_symbols(from_crypto)
    to_currency = Currency.by_symbols(to_crypto)
    account = Account.where(name: account).all if account.any?
    transactions do |ds|
      ds = ds.where(from_currency:) if from_currency.any?
      ds = ds.where(to_currency:) if to_currency.any?
      ds = ds.where(account:) if account.any?
      ds = ds.where(type:) if type.any?
      ds.eager(:account).order(:completed_at)
    end
  end

  def acquisitions
    Acquisition.where(account: accounts).eager(:account).order(:acquired_at)
  end

  def process_transactions!
    unprocessed_transactions.each(&:process!)
  end

  def reset_transactions!
    delete_acquisitions!
    DB[:transactions].where(portfolio_id: id).update(processed: false)
    associations.delete(:transactions)
    associations.delete(:unprocessed_transactions)
  end

  def delete_transactions!
    delete_acquisitions!
    DB[:transactions].where(portfolio_id: id).delete
    associations.delete(:transactions)
    associations.delete(:unprocessed_transactions)
  end

  def delete_acquisitions!
    delete_assets!
    account_ids = accounts { |ds| ds.select(:id) }.map(&:id)
    DB[:acquisitions].where(account_id: account_ids).delete
  end

  def delete_assets!
    delete_transfers!
    delete_disposals!
    DB[:assets].where(portfolio_id: id).delete
    associations.delete(:assets)
  end

  def delete_transfers!
    delete_transferred_assets!
    DB[:transfers].where(portfolio_id: id).delete
  end

  def delete_transferred_assets!
    DB[:transferred_assets].where(portfolio_id: id).delete
  end

  def delete_disposals!
    DB[:disposals].where(portfolio_id: id).delete
    associations.delete(:disposals)
  end
end
