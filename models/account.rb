# frozen_string_literal: true

# Table: accounts
# Columns:
#  id                  | integer                     | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  portfolio_id        | integer                     | NOT NULL
#  platform_id         | integer                     | NOT NULL
#  platform_account_id | text                        |
#  name                | character varying(255)      | NOT NULL
#  accounting_method   | accounting_method           | NOT NULL DEFAULT 'fifo'::accounting_method
#  started_on          | date                        | NOT NULL
#  created_at          | timestamp without time zone | NOT NULL
#  updated_at          | timestamp without time zone | NOT NULL
# Indexes:
#  accounts_pkey                                               | PRIMARY KEY btree (id)
#  accounts_created_at_index                                   | btree (created_at)
#  accounts_portfolio_id_platform_id_index                     | btree (portfolio_id, platform_id)
#  accounts_portfolio_id_platform_id_name_index                | btree (portfolio_id, platform_id, name)
#  accounts_portfolio_id_platform_id_platform_account_id_index | btree (portfolio_id, platform_id, platform_account_id)
# Foreign key constraints:
#  accounts_platform_id_fkey  | (platform_id) REFERENCES platforms(id)
#  accounts_portfolio_id_fkey | (portfolio_id) REFERENCES portfolios(id)
# Referenced By:
#  account_wallets    | account_wallets_account_id_fkey         | (account_id) REFERENCES accounts(id)
#  acquisitions       | acquisitions_account_id_fkey            | (account_id) REFERENCES accounts(id)
#  assets             | assets_account_id_fkey                  | (account_id) REFERENCES accounts(id)
#  disposals          | disposals_account_id_fkey               | (account_id) REFERENCES accounts(id)
#  transactions       | transactions_account_id_fkey            | (account_id) REFERENCES accounts(id)
#  transferred_assets | transferred_assets_from_account_id_fkey | (from_account_id) REFERENCES accounts(id)
#  transferred_assets | transferred_assets_to_account_id_fkey   | (to_account_id) REFERENCES accounts(id)
#  transfers          | transfers_from_account_id_fkey          | (from_account_id) REFERENCES accounts(id)
#  transfers          | transfers_to_account_id_fkey            | (to_account_id) REFERENCES accounts(id)

class Account < Sequel::Model
  many_to_one :portfolio
  many_to_one :platform
  one_to_many :account_wallets
  one_to_many :assets
  one_to_many :acquisitions
  one_to_many :disposals
  one_to_many :transactions
  one_to_many :unprocessed_transactions, class: :Transaction do |ds|
    ds.where(processed: false).order(:completed_at)
  end

  def reset_transactions!
    delete_accounting_data!
    unprocess_transactions!
  end

  def unprocess_transactions!
    DB[:transactions].where(account_id: id).update(processed: false)
    associations.delete(:transactions)
    associations.delete(:unprocessed_transactions)
  end

  def delete_transactions!
    delete_accounting_data!
    DB[:transactions].where(account_id: id).delete
    associations.delete(:transactions)
    associations.delete(:unprocessed_transactions)
  end

  def delete_accounting_data!
    delete_transferred_assets!
    delete_transfers!
    delete_disposals!
    delete_assets!
    delete_acquisitions!
  end

  def delete_disposals!
    DB[:disposals].where(account_id: id).delete
    associations.delete(:disposals)
  end

  def delete_assets!
    DB[:assets].where(account_id: id).delete
    associations.delete(:assets)
  end

  def delete_acquisitions!
    DB[:acquisitions].where(account_id: id).delete
    associations.delete(:acquisitions)
  end

  def delete_transfers!
    DB[:transfers].where(from_account_id: id).delete
    DB[:transfers].where(to_account_id: id).delete
  end

  def delete_transferred_assets!
    DB[:transferred_assets].where(from_account_id: id).delete
    DB[:transferred_assets].where(to_account_id: id).delete
  end
end
