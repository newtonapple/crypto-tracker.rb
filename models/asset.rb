# frozen_string_literal: true

# Table: assets
# Columns:
#  id                  | integer                     | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  portfolio_id        | integer                     | NOT NULL
#  account_id          | integer                     | NOT NULL
#  currency_id         | integer                     | NOT NULL
#  cost_currency_id    | integer                     | NOT NULL
#  acquisition_id      | integer                     | NOT NULL
#  type                | acquisition_type            | NOT NULL
#  amount              | numeric                     | NOT NULL
#  cost_amount         | numeric                     | NOT NULL
#  average_cost_amount | numeric                     | NOT NULL
#  acquired_at         | timestamp without time zone | NOT NULL
#  transferred_at      | timestamp without time zone |
#  created_at          | timestamp without time zone | NOT NULL
#  updated_at          | timestamp without time zone | NOT NULL
# Indexes:
#  assets_pkey                                                     | PRIMARY KEY btree (id)
#  assets_acquisition_id_index                                     | btree (acquisition_id)
#  assets_created_at_account_id_index                              | btree (created_at, account_id)
#  assets_portfolio_id_account_id_currency_id_acquired_at_amount_i | btree (portfolio_id, account_id, currency_id, acquired_at, amount)
#  assets_portfolio_id_account_id_currency_id_average_cost_amount_ | btree (portfolio_id, account_id, currency_id, average_cost_amount, acquired_at, amount)
#  assets_portfolio_id_currency_id_acquired_at_index               | btree (portfolio_id, currency_id, acquired_at)
#  assets_portfolio_id_currency_id_transferred_at_index            | btree (portfolio_id, currency_id, transferred_at)
#  assets_updated_at_account_id_index                              | btree (updated_at, account_id)
# Foreign key constraints:
#  assets_account_id_fkey       | (account_id) REFERENCES accounts(id)
#  assets_acquisition_id_fkey   | (acquisition_id) REFERENCES acquisitions(id)
#  assets_cost_currency_id_fkey | (cost_currency_id) REFERENCES currencies(id)
#  assets_currency_id_fkey      | (currency_id) REFERENCES currencies(id)
#  assets_portfolio_id_fkey     | (portfolio_id) REFERENCES portfolios(id)

class Asset < Sequel::Model
  many_to_one :portfolio
  many_to_one :account
  many_to_one :currency
  many_to_one :cost_currency, class: :Currency
  many_to_one :acquisition

  class << self
    def disposal_lots(account:, currency:, amount:, disposed_at:)
      send("#{account.accounting_method}_disposal_lots", account:, currency:, amount:, disposed_at:)
    end

    def fifo_disposal_lots(account:, currency:, amount:, disposed_at:)
      assets = where(account_id: account.id, currency_id: currency.id).where do
        (Sequel[:amount] > 0) & (acquired_at <= disposed_at) # rubocop:disable Style/NumericPredicate
      end.order(:acquired_at, :id)

      find_disposal_lots(assets, amount) do |lot|
        assets.where { acquired_at >= lot.acquired_at }
      end
    end

    def lifo_disposal_lots(account:, currency:, amount:, disposed_at:)
      assets = where(account_id: account.id, currency_id: currency.id).where do
        (Sequel[:amount] > 0) & (acquired_at <= disposed_at) # rubocop:disable Style/NumericPredicate
      end.reverse(:acquired_at, :id)

      find_disposal_lots(assets, amount) do |lot|
        assets.where { acquired_at <= lot.acquired_at }
      end
    end

    def hifo_disposal_lots(account:, currency:, amount:, disposed_at:)
      assets = where(account_id: account.id, currency_id: currency.id).where do
        (Sequel[:amount] > 0) & (acquired_at <= disposed_at) # rubocop:disable Style/NumericPredicate
      end.order(Sequel.desc(:average_cost_amount), :acquired_at, :id)

      find_disposal_lots(assets, amount) do |lot|
        assets.where { average_cost_amount <= lot.average_cost_amount }
      end
    end

    private

    def find_disposal_lots(assets, amount)
      lots = []
      lot_ids = []
      lot = assets.first

      return lots unless lot

      amount -= lot.amount
      lots << lot
      lot_ids << lot.id
      while amount.positive?
        next_assets = yield lot
        lot = next_assets.exclude(id: lot_ids).first
        break unless lot

        amount -= lot.amount
        lots << lot
        lot_ids << lot.id
      end

      lots
    end
  end

  def to_s
    output = +''
    col_width = 25
    symbol_width = 8
    if id
      id_col = id.to_s.rjust(15)
      output << id_col
      output << ' | '
    end

    account_col = account.name.rjust(15)
    output << account_col
    output << ' | '

    type_col = type.rjust(12)
    currency_symbol = currency.symbol.ljust(symbol_width)
    currency_col = format("%20.10f #{currency_symbol}", amount)
    cost_currency_symbol = cost_currency.symbol.ljust(symbol_width)
    cost_currency_col = format("%20.10f #{cost_currency_symbol}", cost_amount)
    avg_currency_symbol = "#{cost_currency.symbol} / #{currency.symbol}".ljust((symbol_width * 2) - 4)
    avg_cost_currency_col = format("%20.10f #{avg_currency_symbol}", average_cost_amount)

    output << type_col
    output << " | #{currency_col.rjust(col_width)} x #{avg_cost_currency_col}"
    output << " = #{cost_currency_col.rjust(col_width)}"
    output << " | @ #{acquired_at}"
    output
  end
end
